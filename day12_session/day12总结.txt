
	
	
会话控制
> Http协议
		Http协议两个缺陷：
			1.HTTP协议是纯文本的				
			2.HTTP协议是无状态的
			 				
[1] Cookie  
	> 简介
		- 浏览器的缓存技术
			cookie数据保存在浏览器中的
		- Cookie的使用流程：
			1、当浏览器访问服务器时，如果服务器需要记住浏览器的身份可以创建一个Cookie并通过响应头交给浏览器
			2、当浏览器接受到了有Cookie的响应头时，浏览器会自动将cookie缓存起来
			3、当浏览器再次访问服务器时，如果访问的项目对应有cookie，浏览器会自动将cookie添加到请求头中
			4、服务器可以根据请求头中的cookie识别浏览器
		- Cookie实际上就是一个头
			浏览器发送数据时 会自动将cookie添加到请求头中
			服务器响应数据时 会将cookie添加到响应头中交给浏览器
			使用：
				1、记录用户名
				2、记录用户的搜索关键字
			
		> 使用Cookie
			- 创建Cookie
				Cookie cookie = new Cookie("id" , "1111");
			- 发送Cookie	
				response.addCookie(cookie);
			- 读取Cookie  
				Cookie[] cookies = request.getCookies();
				cookie是键值对的结构但是没有根据键获取值的方法
				遍历，可以根据cookie的name属性值判断cookie是否是需要使用的
			- 修改Cookie			
				在遍历时，找到需要修改的cookie对其进行修改
				//修改cookie的值
				cookie.setValue("new value");
				//修改cookie的有效时间[删除cookie]				
				cookie.setMaxAge(0);
				//将修改后的cookie对象设置到响应报文中[浏览器接收到cookie后会替换之前的同名cookie]
				response.addCookie(cookie);
				
		> Cookie的有效时间   
			- 默认有效时间，一次会话[浏览器接受到cookie，默认存在运行内存中，浏览器关闭则销毁]
			- 设置有效时间[浏览器持久化保存Cookie，浏览器会将其保存在本地硬盘中的一个缓存文件内]
				setMaxAge():
					>  大于0：  浏览器保存对应的秒数
							一天： 60*60*24      一周：60*60*24*7
					> =0 : 立即删除，浏览器不保存
					> 小于0：  和默认效果一样 
		
			- Cookie是浏览器缓存技术，不关心服务器是否关闭重启，只要有Cookie在访问服务器时浏览器就会自动携带
		
					
		> Cookie的Path： 浏览器访问服务器的项目如果设置了cookie，浏览器默认在访问当前项目时才会携带cookie
			- setPath(String path);    推荐使用绝对路径，地址浏览器解析，基准地址到8080
					浏览器会根据设置的路径，决定在访问那些资源时才会携带cookie

	> Cookie实际上就是一个头。
	> 服务器创建Cookie，添加到响应头中
	> 浏览器收到，以后再访问时携带Cookie
	> 服务器就可以根据浏览器带着的Cookie来识别不同的用户。

	> Cookie的不足：
		- 不安全：信息在浏览器的请求头中可以查看到
		- 只可以携带纯文本内容，参数过多，获取麻烦，不推荐使用中文
		- 浏览器一般限制Cookie的数量
		- 每一次携带的Cookie数据最终都是要交给服务器使用
	
[2] HttpSession  
	> 简介
		服务器的缓存技术，session是一个域对象，可以在一次会话中共享数据			
		cookie是前端技术，session不是用来替代cookie的，是依赖于cookie进行的扩展	

	> 工作机制
		- Session对象的创建时机
			浏览器访问服务器时，服务器中第一次调用了request.getSession()方法
				> servlet中我们自己手动调用request.getSession
				> 访问jsp页面时，服务器会自动调用request.getSession
		- request.getSession()方法的执行流程：  为什么session对象可以在浏览器的一次会话的多次请求中共享数据
			浏览器访问服务器时，服务器调用request.getSession()方法时，先从请求报文中查找JSESSIONID的cookie
			> 如果没有:[浏览器第一次访问服务器需要使用session对象]
				服务器创建Cookie("JSESSIONID" , uuid)，然后设置到响应头中交给浏览器[浏览器接受到之后默认保存在运行内存中，以后再访问服务器时会自动携带]
				服务器创建Session对象[用来管理浏览器一次会话中的数据]
				服务器将JSESSIONID的值uuid 作为key ， 将Session对象作为value，存到服务器维护的SessionMap<String , HttpSession>中
			> 如果有：[浏览器之前已经访问过服务器并使用过Session对象]
				服务器获取JSESSIONID的值uuid，根据uuid的值作为键去SessionMap中获取对应的session对象[本次会话保存数据的session]
				- 如果获取到了Session对象：可以直接使用
				- 如果获取不到session：[证明浏览器长时间未使用服务器中的session对象超过了服务器保存session的最大不活动销毁时间，服务器已经将session对象销毁了]			服务器重新走没有JSESSIONID请求报文的步骤[创建JSESSIONID/创建Session对象/将他俩存到map中]
			
				
	> 有效时间
		- 作为域对象的作用域
			浏览器保存JSESSIONID的时间，一次会话				
			> 我们也可以通过修改JSESSIONIDcookie的有效时间让session对象的作用域超过一次会话
		- Session对象最大不活动被服务器销毁的时间：
			服务器会从浏览器最后一次使用session对象开始计时，如果超过一定时间，服务器认为该对象已经没人使用，然后将其销毁
			> 1、tomcat配置文件web.xml中统一配置
			> 2、当前项目的配置文件web.xml 可以配置当前项目的session的销毁时间
			> 3、设置具体的session对象的销毁时间： session.setMaxInactiveInterval(int seconds);
			
	> 问题： 有没有可能，浏览器访问服务器时，浏览器没有关闭，但是会话对象却失效了.
		
		
	为什么Session对象是服务器中的一个对象，但是服务器重启后，浏览器仍然可以使用会话对象获取之前存储的数据？	
	> Session的活化和钝化:
		
		> 钝化：
			服务器在关闭时，会自动将内存中的SessionMap序列化保存到本地硬盘中[work 文件夹中项目名文件夹下的SESSIONS.ser文件中]
			- 服务器使用对象流保存到本地硬盘中：需要写入文件中的对象必须实现序列化接口才可以被对象流序列化	
			- 如果希望自定义类的对象能够随着session对象一起钝化活化，必须实现io.serializable接口
		> 活化：
			服务器启动时，会自动将本地硬盘中SESSIONS.ser文件内的SessionMap反序列化到内存中生成为对象

	> 应用：
		1、在一次会话中保持用户的登录状态	[完成注销功能]
			
		2、防止表单的重复提交
			
	> 表单的重复提交
		- 同一个表单中的内容多次提交到服务器中。
			
		- 表单重复提交的危害：
			- 向数据库中插入大量的重复且没有意义的数据，占用服务器的资源。
			- 处理请求服务器并没有检查请求是否为重复的请求，导致恶意的攻击。

		- 1、如果注册成功使用转发跳转到成功页面，用户直接刷新浏览器，会重复提交请求和相同的参数给Servlet继续注册，造成重复提交
			解决： 注册成功使用重定向
		- 2、如果注册时有网络延迟，服务器响应成功报文回来之前，浏览器中显示的始终是注册表单，用户可以多次点击提交按钮，点击一次提交一次表单数据，造成重复提交
			解决： js，给提交按钮绑定单击事件，点击一次后禁用
		- 3、如果浏览器使用回退[缓存，浏览器没有刷新页面，重新访问页面]，再次直接提交，也会造成表单数据的重复提交
			解决：使用Session解决： token
			当用户访问注册页面时
			在页面代码执行时 创建一个唯一字符串
				将唯一字符串存到session中一份
				在注册表单中使用隐藏域交给表单携带一份，交给浏览器
			当用户提交注册请求时
				处理请求的servlet中先检查请求是否为重复提交的请求
				 获取请求参数 唯一字符串
				 获取session中存储的唯一字符串
				 判断两个字符串是否匹配
					>如果匹配，代表正常注册
						处理注册请求
					>如果不匹配，代表不是正常注册[重复提交的请求]
						不处理注册请求
				必须销毁服务器中保存的唯一字符串



